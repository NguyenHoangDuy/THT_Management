@using THT.Models;

@{
    ViewBag.Title = "Ghi nhận hoàn thành kiểm tra thiết bị";
}


@{
    var dict = Model != null ? (Dictionary<string, object>)Model : new Dictionary<string, object>();
    var asset = dict.ContainsKey("asset") ? (Dictionary<string, bool>)dict["asset"] : new Dictionary<string, bool>();
    var listActiveStatus = dict.ContainsKey("activestatus") ? (List<ActiveStatus>)dict["activestatus"] : new List<ActiveStatus>();

}
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
<style>
    .ace-file-input {
        position: relative;
        height: 38px;
        line-height: 38px;
        margin-bottom: 9px;
    }
</style>

<style>
    .ace-file-input {
        position: relative;
        height: 38px;
        line-height: 38px;
        margin-bottom: 9px;
    }
</style>

<section>
    @*<div class="bordered">*@
    @if (Auth_Action.AssetResult(asset, "Search"))
    {
        <div class="jarviswidget" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-deletebutton="false">
            @*<header>
                    <h2 style="color:#6fb3e0">Thông tin công ty</h2>
                </header>*@
            <div>
                <div class="widget-body no-padding">
                    <form class="smart-form">
                        <fieldset>
                            <div class="row">
                                <section class="col col-3">
                                    <label class="input" style="margin-top: -4px">
                                        <input type="text" class="input-xs" id="txtSearch" placeholder="Tên nhân viên">
                                    </label>
                                </section>
                                <section class="col col-3search" style="margin-top: -4px">
                                    <a class="btn btn-primary btn-sm" href="javascript:void(0);" onclick="doSearch()">
                                        <i class="fa fa-search"></i> Tìm kiếm
                                    </a>
                                </section>
                            </div>
                        </fieldset>
                    </form>

                </div>
            </div>
        </div>
    }

    <div class="jarviswidget bordered">
        <div class="row">
            <article class="col-sm-12">
                <div class="widget-body">
                    @(Html.Kendo().Grid<THT.Models.Check_In>()
                    .Name("grid")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.id).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAllHeader(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox'  # if (trang_thai == 'A') { # disabled # } # id='#=id#'  />").Width(30).Filterable(false).Sortable(false);
                        //if (asset.ContainsKey("Update") && asset["Update"])
                        //{
                        //    columns.ForeignKey(p => p.ma_nhan_vien, (System.Collections.IEnumerable)ViewBag.listEmployee, "ma_nhan_vien", "ten_nhan_vien").HtmlAttributes(new { data_id = "#=ma_cong_viec#", onclick = "onOpenPopup(1,this)", @style = "color:\\#428bca;cursor:pointer;text-decoration:underline" }).Title("Mã công việc").Width(80);
                        //}
                        //else
                        //{
                        //    columns.ForeignKey(p => p.ma_nhan_vien, (System.Collections.IEnumerable)ViewBag.listEmployee, "ma_nhan_vien", "ten_nhan_vien").Title("Tên nhân viên").HtmlAttributes(new { data_column = "ma_nhan_vien" }).Width(120);
                        //}
                        columns.ForeignKey(p => p.ma_nhan_vien, (System.Collections.IEnumerable)ViewBag.listEmployee, "ma_nhan_vien", "ten_nhan_vien").Title("Tên nhân viên").HtmlAttributes(new { data_column = "ma_nhan_vien" }).Width(120);
                        columns.ForeignKey(p => p.trang_thai, (System.Collections.IEnumerable)ViewBag.listStatus, "ParamID", "Value").Title("Trạng thái thiết bị").HtmlAttributes(new { data_column = "trang_thai" }).Width(120);
                        columns.Bound(p => p.ngay).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" }).Title("Ngày giờ check-in").Width(130);
                        columns.Bound(p => p.nguoi_tao).Title("Người tạo").Width(130);
                        columns.Bound(p => p.ngay_tao).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" }).Title("Ngày tạo");
                        columns.Bound(p => p.nguoi_cap_nhat).Title("Người cập nhật").Width(130);
                        columns.Bound(p => p.ngay_cap_nhat).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" }).Title("Ngày cập nhật");
                    })
                    .ToolBar(toolBar =>
                    {
                    toolBar.Template(@<text>
                        <div class="pull-left">
                            @*@if (asset.ContainsKey("Insert") && asset["Insert"])
                            {
                                <a class="btn btn-sm btn-success" href="javascript:onOpenPopup(0,this)" id="btnInsert">
                                    <i class="fa fa-plus"></i> Thêm
                                </a>
                            }*@

                            @if (asset.ContainsKey("Update") && asset["Update"])
                            {
                                <a class="btn btn-sm btn-danger" href="javascript:Update()" id="btnDelete">
                                    <i class="fa fa-times"></i> Check_in lại
                                </a>
                            }
                        </div>

                    </text>);
                    })
                        .Events(events => { events.DataBound("onDatabound"); })
                        .Pageable(pager => pager.PageSizes(new[] { 20, 100, 200, 300 }))
                        .Resizable(r => r.Columns(true))
                        .Navigatable()
                        .Scrollable()
                        .Sortable()
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .PageSize(100)
                            .Model(model =>
                            {
                                model.Id(p => p.id);
                            })
                            .Read(read => read.Action("Read", "Check_In"))
                        )
                    )
                </div>
            </article>
        </div>
    </div>


    <div id="popupUpdate" style="display:none">
        <div>
            <form class="smart-form">
                <fieldset>
                    <div class="divlabel" style="width:100px;">
                        <label class="label" style="float:left;margin-top:-14px">Bạn có chắc chắn check-in lại ?</label>
                    </div>
                </fieldset>
                <fieldset style="border:none">
                    <div class="divlabel" style="width:100px;">
                        <label class="label" style="float:left;margin-top:-5px; color:red" id="txtWarning"></label>
                    </div>
                </fieldset>
                <footer style="border:none">
                    <button type="button" class="k-button k-button-icontext btn_custom" id="btnApprove" style="float: left; margin-left: 86px; height: 24px; background-color: \\#6fb3e0" onclick="ConfirmUpdate(0, this)">Đồng ý</button>
                    <button type="button" class="k-button k-button-icontext btn_custom" id="btnCancel" style="float: left; margin-left: 10px; height: 24px; background-color: \\#abbac3; " onclick="ConfirmUpdate(1, this)">Hủy bỏ</button>
                </footer>
            </form>
        </div>
    </div>
</section>


<script>
    var numHeight = 230;
    var keyAction;
    var indexTabstripActive = -1;
    var contentTab;
    $(document).ready(function () {
        $("#menu_Check_In").parent().addClass('active');

        resetMenu();
        $("#menu_Check_In").parent().addClass('active');


        $(window).resize(function () {
            resizeGrid(numHeight);
        });

        $("#txtSearch").keypress(function (e) {
            if (e.keyCode == 13) {
                doSearch();
            }
        });

        //Ctr + S luu form
        //$(document).bind('keydown', function (event) {
        //    if (eventHotKey) {
        //        if (event.ctrlKey || event.metaKey) {
        //            switch (String.fromCharCode(event.which).toLowerCase()) {
        //                case 's':
        //                    event.preventDefault();
        //                    var boolCreatedBy = $("#nguoi_tao").val() != "system";
        //                    $("#formPopup").submit();
        //                    break;
        //            }
        //        }
        //    }
        //});


        $('#popupUpdate').kendoWindow({
            width: "350px",
            actions: ["Close"],
            title: "Cảnh báo",
            visible: false,
            resizable: false,
            close: function (e) {
                $("#divMaskPopup").hide();
            }
        });

        
    })


    function doSearch() {
        var grid = $("#grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var text = $("#txtSearch").val();
        if (text) {
            var filterOr = { logic: "or", filters: [] };
            filterOr.filters.push({ field: "ten_cong_viec", operator: "contains", value: text });
            filterOr.filters.push({ field: "ma_cong_viec", operator: "contains", value: text });
            filter.filters.push(filterOr);
        }

        grid.dataSource.filter(filter);
    }

    // Load lại data khi tạo mới hoặc cập nhật
    function onBindDataToForm(dataItem) {
        for (var propName in dataItem) {
            if (dataItem[propName] != null && dataItem[propName].constructor.toString().indexOf("Date") > -1) {
                var d = kendo.toString(kendo.parseDate(dataItem[propName]), 'dd/MM/yyyy')
                if (d != '01/01/1900') {
                    $("#" + propName).val(d);
                }
            }
            else {
                $("#" + propName).val(dataItem[propName]);
            }
        }
    }

    function checkAllHeader(e) {
        var x = $(e).prop('checked');
        $('#grid').find(".checkrowid:not(:disabled)").each(function () {
            $(this).prop('checked', x);
        });
    }


    function onDatabound(e) {
        resizeGrid();
        var grid = $("#grid").data("kendoGrid");
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
        .options.parameterMap({
            page: grid.dataSource.page(),
            sort: grid.dataSource.sort(),
            filter: grid.dataSource.filter()
        });
        var $exportLink = grid.element.find('.export');
        var href = $exportLink.attr('href');
        if (href) {
            href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
            href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
            $exportLink.attr('href', href);
        }
        //changeStatusGrid('grid', 6);
        $("#divLoading").hide();
    }

    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 1);
    }

    function dateToString(date) {

        if (date != null) {
            date = new Date(date.match(/\d+/)[0] * 1);
            var day = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
            var month = (date.getMonth() + 1) < 10 ? "0" + (date.getMonth() + 1) : (date.getMonth() + 1);
            return day + '/' + month + '/' + date.getFullYear();
        }
        else {
            return "";
        }
    }

    function alertBox(title, content, flag, timeout) {
        //var icon = flag ? "fa-thumbs-up" : "fa-thumbs-down";
        $.smallBox({
            title: title,
            content: content,
            color: flag ? "#e0efd8" : "#f2dedf",
            //iconSmall: "fa " + icon + " bounce animated",
            timeout: timeout
        });
    }

    function ResetForm() {
        LoadDataPopup();
    }

    function ConfirmUpdate(key, obj) {
        var listrowid = "";

        $("#grid").find(".checkrowid:not(:disabled)").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != null && listrowid != "") {
            //var c = confirm("Bạn có chắc chắn muốn ngưng hoạt động?.");
            if (key == 0) {
                $('#popupUpdate').data("kendoWindow").close();
                $.post(r + "/Check_In/Update", { data: listrowid, }, function (data) {
                    if (data.success) {
                        alertBox("Thành công!", " Xóa thành công", true, 3000);
                        $("#grid").data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll').prop('checked', false);
                    }
                    else {
                        alertBox("Báo lỗi! ", data.message, false, 3000);
                        //$("#grid").data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                $('#popupUpdate').data("kendoWindow").close();
                return false;
            }
        }
        else {
            alertBox("", "Vui lòng chọn danh mục cần xóa.", false, 3000);
        }
    }

    var listrowid = "";
    function Update() {
        var listrowid = "";
        $("#grid").find(".checkrowid:not(:disabled)").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != null && listrowid != "") {
            debugger
            $("#divMaskPopup").show();
            var popupUpdate = $('#popupUpdate').data("kendoWindow");
            popupUpdate.center().open();
            $(".k-window span.k-i-close").click(function () {
                eventHotKey = false;
                $("#divMaskPopup").hide();
            });
        }
        else {
            alertBox("Báo lỗi!", "Chọn dữ liệu để check-in.", false, 3000);
            return;
        }
    }
    
</script>